/*
 * Created by SharpDevelop.
 * User: Alexander Petrovskiy
 * Date: 10/31/2014
 * Time: 6:21 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */

namespace Tmx.Core
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml.Linq;
    using Tmx.Interfaces;
    using Tmx.Interfaces.TestStructure;
    
    /// <summary>
    /// Description of TestResultsImporter.
    /// </summary>
    public class TestResultsImporter
    {
        public List<ITestSuite> ImportTestResultsFromXdocument(XDocument doc)
        {
            var df = doc.Root.Name.Namespace;
            var suites = from suite in doc.Descendants("suite")
                                  where suite.Attribute("name").Value != TestData.Autogenerated
                                  select suite;
            return ImportTestSuites(suites);
        }
        
		public List<ITestSuite> ImportTestSuites(IEnumerable<XElement> suiteElements)
		{
            var importedTestSuites = new List<ITestSuite>();
            // TODO: DI
            var testStatistics = new TestStatistics();
            
			foreach (var suiteElement in suiteElements) {
				string suiteDescription = string.Empty;
                suiteDescription = getStringAttribute(suiteElement, "description");
				
                var testSuite = new TestSuite {
                    Id = getStringAttribute(suiteElement, "id"),
                    Name = getStringAttribute(suiteElement, "name"),
                    PlatformId = getStringAttribute(suiteElement, "platformId"),
                    Description = suiteDescription,
                    TimeSpent = getDoubleAttribute(suiteElement, "timeSpent")
                };
                var scenarios = from scenario in suiteElement.Descendants("scenario")
                                            where scenario.Attribute("name").Value != TestData.Autogenerated
                                            select scenario;
                testSuite.TestScenarios.AddRange(importTestScenarios(scenarios, testSuite.Id));
				testStatistics.RefreshSuiteStatistics(testSuite, true);
				setSuiteStatus(testSuite, true);
				importedTestSuites.Add(testSuite);
			}
            return importedTestSuites;
		}

		List<ITestScenario> importTestScenarios(IEnumerable<XElement> scenarioElements, string suiteId)
		{
            var importedTestScenarios = new List<ITestScenario>();
            if (null == scenarioElements) return importedTestScenarios;
            
			foreach (var scenarioElement in scenarioElements) {
				string scenarioDescription = string.Empty;
                scenarioDescription = getStringAttribute(scenarioElement, "description");
				
                var testScenario = new TestScenario {
                    Id = getStringAttribute(scenarioElement, "id"),
                    Name = getStringAttribute(scenarioElement, "name"),
                    PlatformId = getStringAttribute(scenarioElement, "platformId"),
                    Description = scenarioDescription,
                    TimeSpent = getDoubleAttribute(scenarioElement, "timeSpent"),
                    SuiteId = suiteId
                };
                var testResults = from testResult in scenarioElement.Descendants("testResult")
                                  //where testResult.Attribute("name").Value != "autoclosed"
				select testResult;
                testScenario.TestResults.AddRange(importTestResults(testResults, testScenario.SuiteId, testScenario.Id));
                importedTestScenarios.Add(testScenario);
			}
            return importedTestScenarios;
		}
		
		List<ITestResult> importTestResults(IEnumerable<XElement> testResultElements, string suiteId, string scenarioId)
		{
            var importedTestResults = new List<ITestResult>();
            if (null == testResultElements) return importedTestResults;
            
			foreach (var testResultElement in testResultElements) {
				bool passedValue = false;
				bool knownIssueValue = false;
                passedValue |= "PASSED" == getStringAttribute(testResultElement, "status");
                knownIssueValue |= "KNOWN ISSUE" == getStringAttribute(testResultElement, "status");
				TestResultOrigins origin = TestResultOrigins.Logical;
                if ("TECHNICAL" == getStringAttribute(testResultElement, "origin").ToUpper())
                    origin = TestResultOrigins.Technical;
                if ("AUTOMATIC" == getStringAttribute(testResultElement, "origin").ToUpper())
                    origin = TestResultOrigins.Automatic;
				if ((TestResultOrigins.Technical == origin) &&
				    passedValue) {
					continue;
				}
				string testResultDescription = string.Empty;
                testResultDescription = getStringAttribute(testResultElement, "description");
				
				var testResult = new TestResult {
				    Id = getStringAttribute(testResultElement, "id"),
				    Name = getStringAttribute(testResultElement, "name"),
				    Description = testResultDescription,
				    enStatus = (!passedValue ? TestResultStatuses.Failed : knownIssueValue ? TestResultStatuses.KnownIssue : passedValue ? TestResultStatuses.Passed : TestResultStatuses.NotTested),
				    SuiteId = suiteId,
				    ScenarioId = scenarioId
				};
				// TODO: DI
				testResult.SetTimestamp(getDateTimeAttribute(testResultElement, "timestamp"));
				testResult.SetOrigin(origin);
				testResult.SetTimeSpent(getDoubleAttribute(testResultElement, "timeSpent"));
                testResult.PlatformId = getStringAttribute(testResultElement, "platformId");
				try {
					// lastTestResultDetailName = string.Empty;
                    var testResultDetails = from testResultDetail in testResultElement.Descendants("detail")
                                            select testResultDetail;
//					if (null == testResultDetails || !testResultDetails.Any())
//						continue;
					testResult.Details.AddRange(importTestResultDetails(testResultDetails)); // , testResult);
				} catch (Exception e) {
					//                                cmdlet.WriteVerbose(cmdlet, eImportDetails);
				}
				importedTestResults.Add(testResult);
			}
            return importedTestResults;
		}

		List<ITestResultDetail> importTestResultDetails(IEnumerable<XElement> testResultDetailElements)
		{
		    var importedTestResultDetails = new List<ITestResultDetail>();
		    if (null == testResultDetailElements) return importedTestResultDetails;
		    
			foreach (var testResultDetailElement in testResultDetailElements) {
				var detail = new TestResultDetail {
					TextDetail = getStringAttribute(testResultDetailElement, "name")
				};
				string detailStatus = getStringAttribute(testResultDetailElement, "status");
				switch (detailStatus.ToUpper()) {
					case "FAILED":
						detail.DetailStatus = TestResultStatuses.Failed;
						break;
					case "PASSED":
						detail.DetailStatus = TestResultStatuses.Passed;
						break;
					case "KNOWNISSUE":
						detail.DetailStatus = TestResultStatuses.KnownIssue;
						break;
					case "NOTTESTED":
						detail.DetailStatus = TestResultStatuses.NotTested;
						break;
					default:
						detail.DetailStatus = TestResultStatuses.NotTested;
						break;
				}
			}
		    return importedTestResultDetails;
		}
		
        internal void setSuiteStatus(ITestSuite testSuite, bool skipAutomatic)
        {
            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            if (null != testSuite.TestScenarios && 0 < testSuite.TestScenarios.Count) {
                
                foreach (var scenario in testSuite.TestScenarios) {
                    
                    setScenarioStatus(scenario, skipAutomatic);
                    
                    switch (scenario.enStatus) {
                        case TestScenarioStatuses.Passed:
                            counterPassedResults++;
                            if (TestSuiteStatuses.Failed != testSuite.enStatus)
                                testSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        case TestScenarioStatuses.Failed:
                            testSuite.enStatus = TestSuiteStatuses.Failed;
                            return;
                        case TestScenarioStatuses.NotTested:
                            break;
                        case TestScenarioStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            if (TestSuiteStatuses.Failed != testSuite.enStatus)
                                testSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        default:
                            // 20130428
                            //throw new Exception("Invalid value for TestScenarioStatuses");
                            // as Not Tested
                            break;
                    }
                }
            	
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    testSuite.enStatus = TestSuiteStatuses.KnownIssue;
                
                var testStatistics = new TestStatistics();
                testStatistics.RefreshSuiteStatistics(testSuite, skipAutomatic);
            }
        }
        
        internal void setScenarioStatus(ITestScenario testScenario, bool skipAutomatic)
        {
            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            if (null != testScenario.TestResults && 0 < testScenario.TestResults.Count) {
                foreach (var testResult in testScenario.TestResults) {

                    switch (testResult.enStatus) {
                        case TestResultStatuses.Passed:
                            counterPassedResults++;
                            if (TestScenarioStatuses.Failed != testScenario.enStatus)
                                testScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        case TestResultStatuses.Failed:
                            testScenario.enStatus = TestScenarioStatuses.Failed;
                            return;
                        case TestResultStatuses.NotTested:
                            
                            break;
                        case TestResultStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            if (TestScenarioStatuses.Failed != testScenario.enStatus)
                                testScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        default:
                            throw new Exception("Invalid value for TestResultStatuses");
                    }
                }
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    testScenario.enStatus = TestScenarioStatuses.KnownIssue;
                
                var testStatistics = new TestStatistics();
                testStatistics.RefreshScenarioStatistics(testScenario, skipAutomatic);
            }
        }
        
		string getStringAttribute(XElement element, string name)
		{
			try {
				return element.Attribute(name).Value;
			}
			catch {
				return string.Empty;
			}
		}
		
		double getDoubleAttribute(XElement element, string name)
		{
			try {
		        return Convert.ToDouble(element.Attribute(name).Value);
			}
			catch {
				return 0;
			}
		}
		
		DateTime getDateTimeAttribute(XElement element, string name)
		{
			try {
		        return Convert.ToDateTime(element.Attribute(name).Value);
			}
			catch {
				return Convert.ToDateTime(0);
			}
		}
    }
}
