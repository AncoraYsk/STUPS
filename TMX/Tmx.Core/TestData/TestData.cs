/*
 * Created by SharpDevelop.
 * User: Alexander Petrovskiy
 * Date: 17/02/2012
 * Time: 07:48 p.m.
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */

namespace Tmx
{
    using System;
    using System.Collections.Generic;
    using Tmx.Core;
    using Tmx.Core.Types.Remoting;
//    using System.ComponentModel;
    using System.Linq;
    using Interfaces.Remoting;
    using Tmx.Interfaces;
    using Tmx.Interfaces.TestStructure;
    
    public delegate void TmxStructureChangedEventHandler(object sender, EventArgs e);
    public delegate void TmxDatabaseOperationCompletedEventHandler(object sender, EventArgs e);
    
    /// <summary>
    /// Description of TestSuitesCollection.
    /// </summary>
    // 20141014
    public static class TestData
    // public class TestData
    {
        // ----------------- Variables ---------------------------
        
        public const string TestStateNotTested = "NOT TESTED";
        public const string TestStatePassed = "PASSED";
        public const string TestStateFailed = "FAILED";
        public const string TestStateKnownIssue = "KNOWN ISSUE";
        
        public const string Autogenerated = "autogenerated";
        public const string DefaultPlatformName = "default platform";
        public const string DefaultPlatformId = "1";
        
        internal static bool AlreadyInitialized { get; set; }
        
        static TestData()
        // public TestData()
        {
            TestSuites = new List<ITestSuite>();
            TestPlatforms = new List<ITestPlatform>();
            AddDefaultPlatform();
        }
        
        // ----------------- Properties --------------------------
        
        public static List<ITestSuite> TestSuites {get; internal set; }
        
        public static ITestSuite CurrentTestSuite { get; set; }
        public static ITestScenario CurrentTestScenario { get; set; }
        public static ITestResult CurrentTestResult { get; set; } // ?? rewrite as the last item of the collection ??
        public static ITestCase CurrentTestCase { get; set; }
        public static List<ITestPlatform> TestPlatforms {get; internal set; }
        public static ITestPlatform CurrentTestPlatform { get; set; }
        public static ITestResult LastTestResult // ?? rewrite as setting the previous on creating the current ??
        {
            get {
                ITestResult testResult = null;
                if (null != TestSuites && 0 < TestSuites.Count) {
                    
                    int suiteNumber = TestSuites.Count - 1;
                    
                    if (null != TestSuites[suiteNumber].TestScenarios &&
                        0 < TestSuites[suiteNumber].TestScenarios.Count) {
                        
                        int scenarioNumber = TestSuites[TestSuites.Count -1].TestScenarios.Count - 1;
                        
                        if (null != TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults &&
                            0 < TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults.Count) {
                            
                        testResult = TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults[
                                TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults.Count - 1];
                        }
                    }
                }
                
                return testResult;
            }
        }
        
        public static IDatabase CurrentStructureDB { get; set; }
        public static IDatabase CurrentRepositoryDB { get; set; }
        public static IDatabase CurrentResultsDB { get; set; }
        
        // ------------------ Events -----------------------------
        public static event TmxStructureChangedEventHandler TmxNewTestSuiteCreated;
        public static event TmxStructureChangedEventHandler TmxTestSuiteOpened;
        public static event TmxStructureChangedEventHandler TmxNewTestScenarioAdded;
        public static event TmxStructureChangedEventHandler TmxTestScenarioOpened;
        public static event TmxStructureChangedEventHandler TmxNewTestResultClosed;
        public static event TmxStructureChangedEventHandler TmxNewTestResultDetailAdded;
        public static event TmxStructureChangedEventHandler TmxNewTestPlatformCreated;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxBackUpTestResultsCompleted;
        public static event TmxDatabaseOperationCompletedEventHandler TmxRestoreTestResultsCompleted;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestBucketAdded;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestBucketRemoved;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestBucketChanged;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestConstantAdded;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestConstantRemoved;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestConstantChanged;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestCaseAdded;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestCaseRemoved;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestCaseChanged;
        
        internal static void OnTmxNewTestSuiteCreated(object sender, EventArgs e) 
        {
            if (TmxNewTestSuiteCreated != null)
                TmxNewTestSuiteCreated(sender, e);
        }
        
        internal static void OnTmxTestSuiteOpened(object sender, EventArgs e) 
        {
            if (TmxTestSuiteOpened != null)
                TmxTestSuiteOpened(sender, e);
        }
        
        internal static void OnTmxNewTestScenarioAdded(object sender, EventArgs e) 
        {
            if (TmxNewTestScenarioAdded != null)
                TmxNewTestScenarioAdded(sender, e);
        }
        
        internal static void OnTmxTestScenarioOpened(object sender, EventArgs e) 
        {
            if (TmxTestScenarioOpened != null)
                TmxTestScenarioOpened(sender, e);
        }
        
        internal static void OnTmxNewTestResultClosed(object sender, EventArgs e) 
        {
            if (TmxNewTestResultClosed != null)
                TmxNewTestResultClosed(sender, e);
        }
        
        internal static void OnTmxNewTestResultDetailAdded(object sender, EventArgs e) 
        {
            if (TmxNewTestResultDetailAdded != null)
                TmxNewTestResultDetailAdded(sender, e);
        }
        
        internal static void OnTmxBackUpTestResultsCompleted(object sender, EventArgs e) 
        {
            if (TmxBackUpTestResultsCompleted != null)
                TmxBackUpTestResultsCompleted(sender, e);
        }
        
        internal static void OnTmxRestoreTestResultsCompleted(object sender, EventArgs e) 
        {
            if (TmxRestoreTestResultsCompleted != null)
                TmxRestoreTestResultsCompleted(sender, e);
        }
        
        internal static void OnTmxNewTestPlatformCreated(object sender, EventArgs e) 
        {
            if (TmxNewTestPlatformCreated != null)
                TmxNewTestPlatformCreated(sender, e);
        }
        
        internal static void OnTmxTestBucketAdded(object sender, EventArgs e) 
        {
            if (TmxTestBucketAdded != null)
                TmxTestBucketAdded(sender, e);
        }
        
        internal static void OnTmxTestBucketRemoved(object sender, EventArgs e) 
        {
            if (TmxTestBucketRemoved != null)
                TmxTestBucketRemoved(sender, e);
        }
        
        internal static void OnTmxTestBucketChanged(object sender, EventArgs e) 
        {
            if (TmxTestBucketChanged != null)
                TmxTestBucketChanged(sender, e);
        }
        
        internal static void OnTmxTestConstantAdded(object sender, EventArgs e) 
        {
            if (TmxTestConstantAdded != null)
                TmxTestConstantAdded(sender, e);
        }
        
        internal static void OnTmxTestConstantRemoved(object sender, EventArgs e) 
        {
            if (TmxTestConstantRemoved != null)
                TmxTestConstantRemoved(sender, e);
        }
        
        internal static void OnTmxTestConstantChanged(object sender, EventArgs e) 
        {
            if (TmxTestConstantChanged != null)
                TmxTestConstantChanged(sender, e);
        }
        
        internal static void OnTmxTestCaseAdded(object sender, EventArgs e) 
        {
            if (TmxTestCaseAdded != null)
                TmxTestCaseAdded(sender, e);
        }
        
        internal static void OnTmxTestCaseRemoved(object sender, EventArgs e) 
        {
            if (TmxTestCaseRemoved != null)
                TmxTestCaseRemoved(sender, e);
        }
        
        internal static void OnTmxTestCaseChanged(object sender, EventArgs e) 
        {
            if (TmxTestCaseChanged != null)
                TmxTestCaseChanged(sender, e);
        }
        
        // ------------------ Methods ----------------------------
        public static void ResetData()
        {
            if (null != TestSuites) TestSuites.Clear();
//            // 20141117
//            if (null != TestPlatforms) TestPlatforms.Clear();
            CurrentTestResult = null;
            CurrentTestScenario = null;
            CurrentTestSuite = null;
//            try {
            InitTestData();
//            }
//            catch (Exception ee) {
//                Console.WriteLine(ee.Message);
//            }
        }
        
        public static void ResetDataFull()
        {
            ResetData();
            if (null != TestPlatforms) TestPlatforms.Clear();
        }
        
        public static void CleanData()
        {
            if (null != TestSuites) {
                foreach (var suite in TestSuites) {
                    if (null != suite.TestScenarios) {
                        foreach (var scenario in suite.TestScenarios) {
                            scenario.TestResults.Clear();
                            scenario.enStatus = TestScenarioStatuses.NotTested;
                        }
                    }
                    suite.enStatus = TestSuiteStatuses.NotTested;
                }
            }
            CurrentTestResult = null;
            CurrentTestScenario = null;
            CurrentTestSuite = null;
        }
        
        // 20160116
        internal static void AddTestResult(string closingTestResultName, // previousTestResultName
                                           string closingTestResultId, // previousTestResultId
                                           bool? passed,
                                           bool isKnownIssue,
                                           bool generateNextResult,
                                           // 20160116
                                           // InvocationInfo myInvocation,
                                           // ErrorRecord error,
                                           Exception error,
                                           string testResultDescription,
                                           TestResultOrigins origin,
                                           bool skipAutomatic)
        {
            //TestData.InitCurrentTestScenario();
            
            bool generated = TestResultOrigins.Automatic == origin;
            
            ITestResult currentTestResult;
            if (null != TestData.CurrentTestResult) {
                currentTestResult = TestData.CurrentTestResult;
            } else {
                // 20141204
//                currentTestResult =
//                    new TestResult(
//                        TestData.CurrentTestScenario.Id,
//                        TestData.CurrentTestSuite.Id);
                currentTestResult =
                    new TestResult(
                        TestData.CurrentTestScenario.Id,
                        TestData.CurrentTestSuite.Id) {
                    SuiteUniqueId = TestData.CurrentTestSuite.UniqueId,
                    ScenarioUniqueId = TestData.CurrentTestScenario.UniqueId
                };
            }
            
            if (string.IsNullOrEmpty(currentTestResult.Name)) {
                
//                if (closingTestResultName != null &&
//                    closingTestResultName != string.Empty &&
//                    closingTestResultName.Length > 0 &&
//                    TestData.CurrentTestResult != null && 
//                     closingTestResultName != TestData.CurrentTestResult.Name) {

                if (!string.IsNullOrEmpty(closingTestResultName) &&
                    ((TestData.CurrentTestResult != null && 
                      closingTestResultName != TestData.CurrentTestResult.Name) ||
                      null == TestData.CurrentTestResult)) {
                    
                    currentTestResult.Name = closingTestResultName;
                } else {
                    currentTestResult.Name = "generated test result name";
                }
                
            } else {
                // the current test result is a result that was preset
                // nothing to do
            }

            // setting test result's origin
            if (generated)
                currentTestResult.SetOrigin(TestResultOrigins.Automatic);
            else
                currentTestResult.SetOrigin(origin);

            if (string.IsNullOrEmpty(currentTestResult.Id)) {
                
                if (!string.IsNullOrEmpty(closingTestResultId) &&
                    ((null != TestData.CurrentTestResult &&
                    closingTestResultId != TestData.CurrentTestResult.Id) ||
                    null == TestData.CurrentTestResult))
                    currentTestResult.Id = closingTestResultId;
                else
                    currentTestResult.Id = GetTestResultId();
            } else {
                // there already was the Id
                // nothing to do
            }
            
            if (passed != null) {
                if ((bool)passed) {
                    currentTestResult.enStatus = TestResultStatuses.Passed;
                } else {
                    currentTestResult.enStatus = TestResultStatuses.Failed;
                }

                if (isKnownIssue) {
                    currentTestResult.enStatus = TestResultStatuses.KnownIssue;
                }
            } else {
                //currentTestResult.enStatus = TestResultStatuses.NotTested;
                
                // if there were no errors during the test case execution
                // it is marked as passed
                bool noErrors = true;
                if (null == currentTestResult.Error &&
                    TestResultStatuses.Failed != currentTestResult.enStatus &&
                    TestResultStatuses.KnownIssue != currentTestResult.enStatus) {
                    
                    foreach (ITestResultDetail detail in currentTestResult.Details) {
                        if (null == ((TestResultDetail)detail).ErrorDetail) {
                            noErrors = false;
                            break;
                        }
                    }
                }
                
                if (noErrors && null != passed) {
                    currentTestResult.enStatus = TestResultStatuses.Passed;
                }

            }
            
            if (!string.IsNullOrEmpty(testResultDescription)) {
                currentTestResult.Description = testResultDescription;
            }
            
            if (generated)
                currentTestResult.SetGenerated();
            
            if (TmxHelper.TestCaseStarted == DateTime.MinValue)
                TmxHelper.TestCaseStarted = DateTime.Now;

            currentTestResult.SetNow();
            currentTestResult.SetTimeSpent(
                (currentTestResult.Timestamp - TmxHelper.TestCaseStarted).TotalSeconds);
            
            TestData.CurrentTestResult = currentTestResult;
            
            try {
                TestData.CurrentTestResult.PlatformUniqueId = TestData.CurrentTestScenario.PlatformUniqueId;
                CurrentTestResult.PlatformId = CurrentTestScenario.PlatformId;
                // 20141204
                CurrentTestResult.SuiteUniqueId = CurrentTestSuite.UniqueId;
                CurrentTestResult.ScenarioUniqueId = CurrentTestScenario.UniqueId;
            }
            catch {}
            
            if (null != TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] &&
                TestResultOrigins.Logical == TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Origin &&
                TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] != TestData.CurrentTestResult &&
                !string.IsNullOrEmpty(TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Name)) {
                
                TmxHelper.TestCaseStarted = DateTime.Now;
                // 20141204
                // TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
                TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id) {
                                                                 SuiteUniqueId = TestData.CurrentTestSuite.UniqueId,
                                                                 ScenarioUniqueId = TestData.CurrentTestScenario.UniqueId
                                                             });
            }

            /*
            if (null != TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] &&
                TestResultOrigins.Logical == TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Origin &&
                TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] != TestData.CurrentTestResult &&
                null != TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Name &&
                0 < TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Name.Length) {
                
                TmxHelper.TestCaseStarted =
                    System.DateTime.Now;
                TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
               
            }
            */

            TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] = 
                TestData.CurrentTestResult;
            
            #region Test Result's PowerShell data
            // 20160116
            /*
            if (myInvocation != null) {
                TestData.CurrentTestResult.SetScriptName(TmxHelper.GetScriptName(myInvocation));
                TestData.CurrentTestResult.SetLineNumber(TmxHelper.GetScriptLineNumber(myInvocation));
                TestData.CurrentTestResult.SetPosition(TmxHelper.GetPipelinePosition(myInvocation));
                // 20130329
                try {
                    
                    if (((bool)passed && Preferences.LogScriptName_Passed) || (!(bool)passed && Preferences.LogScriptName_Failed)) {
                        
                        TestData.CurrentTestResult.Code += 
                            "script name: " + 
                            TestData.CurrentTestResult.ScriptName;
    
                    }
                }
                catch {}
                try {
                    
                    if (((bool)passed && Preferences.LogLineNumber_Passed) || (!(bool)passed && Preferences.LogLineNumber_Failed)) {
                        
                        TestData.CurrentTestResult.Code +=
                            "\r\nline number: " +
                            TestData.CurrentTestResult.LineNumber.ToString();
    
                    }
                }
                catch {}
                try {
                    
                    if (((bool)passed && Preferences.LogCode_Passed) || (!(bool)passed && Preferences.LogCode_Failed)) {
                        
                        TestData.CurrentTestResult.Code +=
                            "\r\ncode:\r\n" +
                            myInvocation.Line;
    
                    }
                }
                catch {}
            }
            
            if (error != null) {
                // 20150116
                // TestData.CurrentTestResult.SetError(error);
                TestData.CurrentTestResult.SetError(error.Exception);
            }
            */
            #endregion Test Result's PowerShell data
            
            var sourceTestResult = TestData.CurrentTestResult;
            SetScenarioStatus(skipAutomatic);
            SetSuiteStatus(skipAutomatic);
            
            if (generateNextResult) {
                // write current time
                TmxHelper.TestCaseStarted = DateTime.Now;
                TestData.CurrentTestScenario.TestResults.Add(
                    new TestResult(
                       TestData.CurrentTestScenario.Id,
                       TestData.CurrentTestScenario.SuiteId) { SuiteUniqueId = CurrentTestScenario.SuiteUniqueId, ScenarioUniqueId = CurrentTestScenario.UniqueId });
                TestData.CurrentTestResult = 
                    TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1];
            } else {
                // write zero time
                TmxHelper.TestCaseStarted = DateTime.MinValue;
                TestData.CurrentTestResult = null;
            }
            
            if (Preferences.Storage) {
                using (var session = StorageHelper.SessionFactory.OpenSession())
                {
                    session.Save(TestData.CurrentTestResult);
                }
            }

            OnTmxNewTestResultClosed(sourceTestResult, null);
        }
        
        internal static void InitTestData()
        {
            if (AlreadyInitialized) return;
            
            TmxHelper.TestCaseStarted = DateTime.Now;
            
            if (null == TestData.TestSuites)
                TestData.TestSuites = new List<ITestSuite>();
            if (null == TestData.TestPlatforms)
                TestData.TestPlatforms = new List<ITestPlatform>();
            
            // check that at least one platform exists
            if (0 == TestData.TestPlatforms.Count)
                AddDefaultPlatform();
            /*
            if (0 == TestData.TestPlatforms.Count) {
                TmxHelper.NewTestPlatform(
                    // 20140716
                    // "autogenerated",
                    TestData.Autogenerated,
                    GetTestPlatformId(),
                    "This platform has been created automatically",
                    Environment.OSVersion.Platform.ToString(),
                    Environment.OSVersion.VersionString,
                    Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"),
                    "");
            }
            */
            
            // check that at least one suite exists
            if (TestData.TestSuites.Count == 0)
                TmxHelper.NewTestSuite(
                    TestData.Autogenerated,
                    GetTestSuiteId(),
                    TestData.CurrentTestPlatform.UniqueId,
                    "This suite has been created automatically",
                    null,
                    null);
            
            // check that at least one scenario exists
            if (TestData.CurrentTestSuite.TestScenarios.Count == 0)
                CreateAutogeneratedTestScenario();
            
            AlreadyInitialized = true;
        }
        
        internal static void AddDefaultPlatform()
        {
            try {
                if (null != TestData.TestPlatforms && 0 < TestData.TestPlatforms.Count && TestData.TestPlatforms.Any(tp => tp.Id == TestData.DefaultPlatformId && tp.Name == TestData.DefaultPlatformName))
                    return;
            TmxHelper.NewTestPlatform(
                TestData.DefaultPlatformName,
                TestData.DefaultPlatformId,
                "This platform has been created automatically",
                Environment.OSVersion.Platform.ToString(),
                Environment.OSVersion.VersionString,
                Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"), "");
            }
            catch (Exception ee) {
                Console.WriteLine(ee.Message);
            }
        }
        
        internal static string GetDefaultPlatformId()
        {
            return TestData.GetTestPlatform(TestData.DefaultPlatformName, TestData.DefaultPlatformId).Id;
        }
        
        internal static Guid GetDefaultPlatformUniqueId()
        {
            return TestData.GetTestPlatform(TestData.DefaultPlatformName, TestData.DefaultPlatformId).UniqueId;
        }
        
        internal static void CreateAutogeneratedTestScenario()
        {
            var dataObject = new AddScenarioCmdletBaseDataObject {
                Name = TestData.Autogenerated,
                Id = GetTestScenarioId(),
                Description = "This scenario has been created automatically",
                TestSuiteName = TestData.CurrentTestSuite.Name,
                TestSuiteId = TestData.CurrentTestSuite.Id,
                InputObject = TestData.CurrentTestSuite,
                TestPlatformId = TestData.CurrentTestPlatform.Id,
                TestPlatformUniqueId = TestData.CurrentTestPlatform.UniqueId
            };
            TmxHelper.AddTestScenario(dataObject);
        }
        
        internal static void InitCurrentTestSuite()
        {
            if (null == TestData.CurrentTestSuite) {
                
                if (null == TestData.TestSuites) {
                    
//                    try {
                    TestData.InitTestData();
//                    }
//                    catch (Exception ee) {
//                        Console.WriteLine(ee.Message);
//                    }
                } else {
                    
                    if (0 == TestData.TestSuites.Count) {
                        
                        TestData.AddTestSuite(
                            TestData.Autogenerated,
                            TestData.GetTestSuiteId(),
                            TestData.CurrentTestPlatform.UniqueId,
                            string.Empty,
                            null,
                            null);
                    }
                }
                
                TestData.CurrentTestSuite = TestData.TestSuites[TestData.TestSuites.Count - 1];
            }
        }
        
        internal static void InitCurrentTestScenario()
        {
            if (null == TestData.CurrentTestSuite)
                TestData.InitCurrentTestSuite();
            
            if (null == TestData.CurrentTestScenario) {
                
                if (null == TestData.CurrentTestSuite.TestScenarios)
                    // that's impossible...
                    TestData.CurrentTestSuite.TestScenarios = new List<ITestScenario>();
                                
                if (0 == TestData.CurrentTestSuite.TestScenarios.Count) {
                    
                    TestData.AddTestScenario(
                        TestData.CurrentTestSuite,
                        TestData.Autogenerated,
                        TestData.GetTestScenarioId(),
                        string.Empty,
                        string.Empty,
                        string.Empty,
                        TestData.CurrentTestPlatform.UniqueId,
                        null,
                        null);
                }
                
                TestData.CurrentTestScenario =
                    (TestScenario)TestData.CurrentTestSuite.TestScenarios[
                        TestData.CurrentTestSuite.TestScenarios.Count - 1];
            }
        }
        
        internal static void SetScenarioStatus(bool skipAutomatic)
        {
            if (null == TestData.CurrentTestScenario) {
                TestData.InitCurrentTestScenario();
            }
            
            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            if (null != TestData.CurrentTestScenario &&
                null != TestData.CurrentTestScenario.TestResults &&
                0 < TestData.CurrentTestScenario.TestResults.Count) {
                foreach (var testResult in TestData.CurrentTestScenario.TestResults)
                    switch (testResult.enStatus) {
                        case TestResultStatuses.Passed:
                            counterPassedResults++;
                            // 20131001
                            //TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            if (TestScenarioStatuses.Failed != TestData.CurrentTestScenario.enStatus)
                                TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        case TestResultStatuses.Failed:
                            TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Failed;
                            return;
                    //break;
                        case TestResultStatuses.NotTested:
                            
                            break;
                        case TestResultStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            // 20131001
                            //TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            if (TestScenarioStatuses.Failed != TestData.CurrentTestScenario.enStatus)
                                TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        default:
                            throw new Exception("Invalid value for TestResultStatuses");
                    }
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.KnownIssue;
            
                // set statistics
                var testStatistics = new TestStatistics();
                testStatistics.RefreshScenarioStatistics(TestData.CurrentTestScenario, skipAutomatic);
            }
        }
        
        internal static void SetSuiteStatus(bool skipAutomatic)
        {
            if (null == TestData.CurrentTestSuite)
                TestData.InitCurrentTestScenario();
            
            TestData.SetScenarioStatus(skipAutomatic);
            
            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            if (TestData.CurrentTestSuite != null && 
                0 < TestData.CurrentTestSuite.TestScenarios.Count) {
                
                foreach (var scenario in TestData.CurrentTestSuite.TestScenarios) {
                    
                    switch (scenario.enStatus) {
                        case TestScenarioStatuses.Passed:
                            counterPassedResults++;
                            if (TestSuiteStatuses.Failed != TestData.CurrentTestSuite.enStatus)
                                TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        case TestScenarioStatuses.Failed:
                            TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Failed;
                            return;
                        case TestScenarioStatuses.NotTested:
                            break;
                        case TestScenarioStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            if (TestSuiteStatuses.Failed != TestData.CurrentTestSuite.enStatus)
                                TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        default:
                            // 20130428
                            //throw new Exception("Invalid value for TestScenarioStatuses");
                            // as Not Tested
                            break;
                    }
                }
                
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.KnownIssue;
                
                // set statistics
                var testStatistics = new TestStatistics();
                testStatistics.RefreshSuiteStatistics(TestData.CurrentTestSuite, skipAutomatic);
            }
        }
        
        internal static string GetTestPlatformId()
        {
            string result = string.Empty;            
            
            // read the last id used and generate a new one
            int testNumber = TestData.TestPlatforms.Count; // + 1;
            bool noValidId = true;
            do {
                foreach (var Platform in TestData.TestPlatforms) {
                    if (Platform.Id == testNumber.ToString()) {
                        testNumber++;
                    }
                }
                noValidId = false;
                result = testNumber.ToString();
            } while (noValidId);
            
            return result;
        }
        
        internal static string GetTestSuiteId()
        {
            string result = string.Empty;            
            
            // read the last id used and generate a new one
            int testNumber = null != TestData.TestSuites ? TestData.TestSuites.Count : 1;
            bool noValidId = true;
            do {
                foreach (var suite in TestData.TestSuites) {
                    if (suite.Id == testNumber.ToString()) {
                        testNumber++;
                    }
                }
                // TestData.TestSuites.Select(ts => ts.Id == testNumber.Where(ts => ts.Id == testNumber).ForEach(ts => ts == testNumber ? testNumber++ : continue }
                noValidId = false;
                result = testNumber.ToString();
            } while (noValidId);
            
            return result;
        }
        
        internal static string GetTestScenarioId()
        {
            string result = string.Empty;            
            
            int scenarioNumber = 1;
            if (null != TestData.TestSuites && 0 < TestData.TestSuites.Count) {

                if (null != TestData.CurrentTestSuite.TestScenarios) {

                    // read the last used id and generate a new one
                    scenarioNumber = 
                        TestData.CurrentTestSuite.TestScenarios.Count; // + 1;
                    bool noValidId = true;

                    do {
                        foreach (var scenario in TestData.CurrentTestSuite.TestScenarios)
                            if (scenario.Id == scenarioNumber.ToString())
                                scenarioNumber++;
                        noValidId = false;
                        if (0 == scenarioNumber)
                            scenarioNumber++;
                        result = scenarioNumber.ToString();
                    } while (noValidId);
                } else
                    result = scenarioNumber.ToString();
            } else
                result = scenarioNumber.ToString();
            return result;
        }
        
        internal static string GetTestResultId()
        {
            string result = string.Empty;
            
            int testNumber = 0;
            if (null != TestData.TestSuites && 0 < TestData.TestSuites.Count) {
                
                if (null != TestData.CurrentTestScenario) {
                    
                    if (null != TestData.CurrentTestScenario.TestResults) {
                        
                        // read the last used id and generate a new one
                        testNumber = 
                            TestData.CurrentTestScenario.TestResults.Count; // + 1;
                        bool noValidId = true;
                        do {
                            foreach (var testResult in TestData.CurrentTestScenario.TestResults)
                                if (testResult.Id == testNumber.ToString())
                                    testNumber++;
                            noValidId = false;
                            result = testNumber.ToString();
                        } while (noValidId);
                        
                    } else
                        result = testNumber.ToString();
                } else
                    result = testNumber.ToString();
            } else
                result = testNumber.ToString();
            return result;
        }
        
//        internal static bool AttachTestResultCode()
//        {
//            bool result = false;
//            
//            
//            
//            return result;
//        }
        
        internal static void AddTestResultTextDetail(ITestResultDetailCmdletBaseDataObject cmdlet, object detail)
        {
            ITestResultDetail testResultDetail = 
                new TestResultDetail();
            
            testResultDetail.AddTestResultDetail(
                TestResultDetailTypes.Comment,
                detail.ToString());
            CurrentTestResult.Details.Add(testResultDetail);
            
            testResultDetail.DetailStatus = cmdlet.TestResultStatus;
            
            switch (cmdlet.TestResultStatus) {
                case TestResultStatuses.Failed:
                    if (TestResultStatuses.KnownIssue != CurrentTestResult.enStatus)
                        CurrentTestResult.enStatus = TestResultStatuses.Failed;
                    break;
                case TestResultStatuses.Passed:
                    if (TestResultStatuses.KnownIssue != CurrentTestResult.enStatus &&
                    TestResultStatuses.Failed != CurrentTestResult.enStatus)
                        CurrentTestResult.enStatus = TestResultStatuses.Passed;
                    break;
                case TestResultStatuses.NotTested:
                    // nothing to do
                    break;
                case TestResultStatuses.KnownIssue:
                    CurrentTestResult.enStatus = TestResultStatuses.KnownIssue;
                    break;
                default:
//                    cmdlet.WriteVerbose(cmdlet, "TestResultStatus = ????");
//                    cmdlet.WriteVerbose(cmdlet, cmdlet.TestResultStatus.ToString());
                    break;
            }
            
            OnTmxNewTestResultDetailAdded(testResultDetail, null);
            
            if (cmdlet.Finished) {
                
                TmxHelper.TestCaseStarted = DateTime.Now;
                
                // 20130621                
//                TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
//                TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] =
//                    TestData.CurrentTestResult;
                // 20130621
                ITestResult newTestResult = new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id);
                if (TestData.CurrentTestResult == TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1]) {
                    // autogeneration + Close-TmxTestResult
                    TestData.CurrentTestScenario.TestResults.Add(newTestResult);
                    TestData.CurrentTestResult = TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1];
                } else {
                    // Set-TmxCurrentTestResult + any closing
                    TestData.CurrentTestScenario.TestResults.Add(TestData.CurrentTestResult);
                    TestData.CurrentTestResult = newTestResult;
                }
            }
        }
        
        // 20160116
        // internal static void AddTestResultErrorDetail(ErrorRecord detail)
        internal static void AddTestResultErrorDetail(Exception detail)
        {
            var testResultDetail = new TestResultDetail();
            
            testResultDetail.AddTestResultDetail(
                TestResultDetailTypes.ErrorRecord,
                detail);
            CurrentTestResult.Details.Add(testResultDetail);
        }
        
        internal static void AddTestResultScreenshotDetail(object detail)
        {
            var testResultDetail = new TestResultDetail();
            
            testResultDetail.AddTestResultDetail(
                TestResultDetailTypes.Screenshot,
                detail.ToString());
            CurrentTestResult.Details.Add(testResultDetail);
            CurrentTestResult.SetScreenshot(detail.ToString());
        }
        
        internal static bool AddTestPlatform(
            string testPlatformName,
            string testPlatformId,
            string testPlatformDesctiption,
            string testPlatformOS,
            string testPlatformVersion,
            string testPlatformArchitecture,
            string testPlatformLanguage)
        {
            bool result = false;
            
            if (string.IsNullOrEmpty(testPlatformId))
                testPlatformId = GetTestPlatformId();
            
            var alreadyExistingTestPlatform = GetTestPlatform(testPlatformName, testPlatformId);
            if (null != alreadyExistingTestPlatform) {
                TestData.CurrentTestPlatform = alreadyExistingTestPlatform;
                // the test platform requested won't be duplicated, exit
                return false;
            }
            
            var testPlatform = new TestPlatform {
                Id = testPlatformId,
                Name = testPlatformName,
                OperatingSystem = testPlatformOS,
                Version = testPlatformVersion,
                Architecture = testPlatformArchitecture,
                Language = testPlatformLanguage,
                Description = testPlatformDesctiption
            };
            TestPlatforms.Add(testPlatform);
            
            TestData.CurrentTestPlatform = 
                TestData.TestPlatforms[TestPlatforms.Count - 1];
            
            if (TestData.CurrentTestPlatform != null)
                OnTmxNewTestPlatformCreated(TestData.CurrentTestPlatform, new EventArgs()); //null);
            
            if (Preferences.Storage) {
                using (var session = StorageHelper.SessionFactory.OpenSession()) {
                    session.Save(TestData.CurrentTestPlatform);
                }
            }
            
            result = true;
            return result;
        }
        
        internal static bool AddTestSuite(string testSuiteName, 
                                          string testSuiteId,
                                          Guid testPlatformId,
                                          string testSuiteDesctiption,
                                          // 20141211
                                          // ScriptBlock[] testSuiteBeforeScenario,
                                          // ScriptBlock[] testSuiteAfterScenario)
                                          ICodeBlock[] testSuiteBeforeScenario,
                                          ICodeBlock[] testSuiteAfterScenario)
        {
            bool result = false;
            
            if (string.IsNullOrEmpty(testSuiteId))
                testSuiteId = GetTestSuiteId();
            
            if (null != GetTestSuite(testSuiteName, testSuiteId, testPlatformId))
                // the suite requested won't be duplicated, exit
                return false;
            
            // removing the first (autogenerated) suite
            try {
                if (null == TestData.TestSuites)
                    TestData.TestSuites = new List<ITestSuite>();
                // 20141117
                // probably useful
//                if (1 == TestData.TestSuites.Count && TestData.Autogenerated == TestData.TestSuites[0].Name &&
//                                1 == TestData.TestSuites[0].TestScenarios.Count && TestData.Autogenerated == TestData.TestSuites[0].TestScenarios[0].Name &&
//                                1 == TestData.TestSuites[0].TestScenarios[0].TestResults.Count && TestResultOrigins.Automatic == TestData.TestSuites[0].TestScenarios[0].TestResults[0].Origin) {
                if (1 == TestData.TestSuites.Count && TestData.TestSuites.All(ts => ts.Name == TestData.Autogenerated))
                    TestData.TestSuites.RemoveAt(0);
            } catch (Exception ee) {
                Console.WriteLine(ee.Message);
            }
            
            // set time spent on the previous suite
            if (null != TestData.CurrentTestSuite) {
                
                if (DateTime.MinValue != TestData.CurrentTestSuite.Timestamp) {
                    
                    TestData.CurrentTestSuite.SetTimeSpent(
                        TestData.CurrentTestSuite.TimeSpent +=
                        (DateTime.Now - TestData.CurrentTestSuite.Timestamp).TotalSeconds);
                    
                    TestData.CurrentTestSuite.Timestamp = DateTime.MinValue;
                }
            }
            
            TestSuites.Add(new TestSuite(testSuiteName, testSuiteId));
            if (!string.IsNullOrEmpty(testSuiteDesctiption))
                TestData.TestSuites[TestSuites.Count - 1].Description = testSuiteDesctiption;
            
            TestData.CurrentTestSuite = TestData.TestSuites[TestSuites.Count - 1];
            
            if (TestData.CurrentTestSuite != null) {
                
                TestData.CurrentTestSuite.PlatformUniqueId = testPlatformId != Guid.Empty ? testPlatformId : TestData.CurrentTestPlatform.UniqueId;
                TestData.CurrentTestSuite.PlatformId = TestPlatforms.First(tp => tp.UniqueId == CurrentTestSuite.PlatformUniqueId).Id;
                TestData.CurrentTestSuite.BeforeScenario = testSuiteBeforeScenario;
                TestData.CurrentTestSuite.AfterScenario = testSuiteAfterScenario;
                
                // set the initial time for this suite's session
                TestData.CurrentTestSuite.SetNow();
                
                OnTmxNewTestSuiteCreated(TestData.CurrentTestSuite, new EventArgs()); //null);
            }
            
            if (Preferences.Storage) {
                using (var session = StorageHelper.SessionFactory.OpenSession()) {
                    session.Save(TestData.CurrentTestSuite);
                }
            }
            
            if (0 == TestData.CurrentTestSuite.TestScenarios.Count)
                CreateAutogeneratedTestScenario();
            
            result = true;
            return result;
        }
        
        internal static ITestPlatform GetTestPlatform(Guid testPlatformId)
        {
            return TestData.TestPlatforms.FirstOrDefault(tp => tp.UniqueId == testPlatformId);
        }
        
        // 20141114
        internal static ITestPlatform GetTestPlatform(string testPlatformName, string testPlatformId)
        // internal static ITestPlatform GetTestPlatform(string testPlatformName, Guid testPlatformId)
        {
            if (null == TestPlatforms || 0 == TestPlatforms.Count) return null;
            
            ITestPlatform result = null;
            
            if (!string.IsNullOrEmpty(testPlatformName)) {
                foreach (var testPlatform in TestPlatforms.Where(tp => tp.Name == testPlatformName)) {
                    
                    // id does not match
                    if (!string.IsNullOrEmpty(testPlatformId) && testPlatformId != testPlatform.Id)
                        continue;
                    
                    if (!string.IsNullOrEmpty(testPlatformId) && testPlatformId == testPlatform.Id)
                        result = testPlatform;
                    
                    if (string.IsNullOrEmpty(testPlatformId))
                        result = testPlatform;
                    
                    if (result != null)
                        return result;
                }
            }
            
            return !string.IsNullOrEmpty(testPlatformId) ? TestPlatforms.FirstOrDefault(testPlatform => testPlatform.Id == testPlatformId) : result;
            
            /*
            if (!string.IsNullOrEmpty(testPlatformId)) {
                // 20140902
//                foreach (var testPlatform in TestPlatforms.Where(testPlatform => testPlatform.Id == testPlatformId))
//                {
//                    result = testPlatform;
//                    return result;
//                }
                return TestPlatforms.FirstOrDefault(testPlatform => testPlatform.Id == testPlatformId);
            }
            */
            
        }
        
        // 20141114
        // internal static ITestSuite GetTestSuite(string testSuiteName, string testSuiteId, string testPlatformId)
        internal static ITestSuite GetTestSuite(string testSuiteName, string testSuiteId, Guid testPlatformUniqueId)
        {
            ITestSuite result = null;
            
            if (!string.IsNullOrEmpty(testSuiteName)) {
                foreach (var testSuite in TestSuites.Where(ts => ts.Name == testSuiteName)) {
                    
                    // id does not match
                    if (!string.IsNullOrEmpty(testSuiteId) && testSuiteId != testSuite.Id)
                        continue;
                    // 20140902
//                    if (!string.IsNullOrEmpty(testSuiteId) && testSuiteId == testSuite.Id) {
//                        if (testPlatformId != testSuite.PlatformId)
//                            continue;
//                        result = testSuite;
//                    }
//                   
//                    if (string.IsNullOrEmpty(testSuiteId)) {
//                        // does this code ever work?
//                        if (testPlatformId != testSuite.PlatformId)
//                            continue;
//                        result = testSuite;
//                    }
//                    
//                    if (result != null)
//                        return result;
                    // 20140922
                    if (string.IsNullOrEmpty(testSuiteId) || testSuiteId == testSuite.Id)
                        // result = testSuite;
                        // 20141114
                        // if (testPlatformId == testSuite.PlatformId)
                        // 20141119
                        // if (testPlatformUniqueId == testSuite.PlatformId)
                        if (testPlatformUniqueId == testSuite.PlatformUniqueId)
                            result = testSuite;
                    if (null != result)
                       return result;
                }
            }
            
            if (!string.IsNullOrEmpty(testSuiteId)) {
                foreach (var testSuite in TestSuites) {
                    if (testSuite.Id == testSuiteId) {
                        
                        // 20141114
                        // if (testPlatformId != testSuite.PlatformId)
                        // 20141119
                        // if (testPlatformUniqueId != testSuite.PlatformId)
                        if (testPlatformUniqueId != testSuite.PlatformUniqueId)
                            continue;
                        if (testSuiteName != testSuite.Name && !string.IsNullOrEmpty(testSuiteName))
                            continue;
                        result = testSuite;
                        return result;
                    }
                }
            }
            return result;
        }
        
        internal static bool AddTestCase(
            string testCaseName,
            string testCaseId,
            string testCaseDescription,
            string testSuiteName,
            string testSuiteId,
            string testScenarioName,
            string testScenarioId,
            Guid testPlatformId,
            // 20141211
            // ScriptBlock[] testCode)
            ICodeBlock[] testCode)
        {
            bool result = false;
            
            var testSuite =
                TestData.GetTestSuite(
                    testSuiteName,
                    testSuiteId,
                    testPlatformId) ?? TestData.CurrentTestSuite;

            /*
            if (null == testSuite) { // ?? mistaken behavior ??
                
                testSuite = TestData.CurrentTestSuite;
            }
            */
            
            var testScenario =
                TestData.GetTestScenario(
                    testSuite,
                    testScenarioName,
                    testScenarioId,
                    testSuiteName,
                    testSuiteId,
                    testPlatformId);
            
            if (null == testScenario) { // ?? mistaken behavior ??
                
                testScenario = TestData.CurrentTestScenario;
            }
            
            var testCase =
                new TestCase(
                    testCaseName,
                    testCaseId);
            
            testCase.Description = testCaseDescription;
            testCase.TestCode = testCode;
            TestData.CurrentTestCase = testCase;
            
            try {
                
                testScenario.TestCases.Add(testCase);
                result = true;
            }
            catch (Exception eFailedToAdd) {
                throw eFailedToAdd;
                //result = false;
            }
            
            return result;
        }
        
        internal static bool AddTestScenario(ITestSuite testSuite,
                                             string testScenarioName,
                                             string testScenarioId,
                                             string testScenarioDescription,
                                             string testSuiteName,
                                             string testSuiteId,
                                             Guid testPlatformId,
                                             // 20141211
                                             // ScriptBlock[] testScenarioBeforeTest,
                                             // ScriptBlock[] testScenarioAfterTest)
                                             ICodeBlock[] testScenarioBeforeTest,
                                             ICodeBlock[] testScenarioAfterTest)
        {
            bool result = false;
            
            // clean up the last empty test result
            // in the previous scenario
            if (null != TestData.CurrentTestScenario) {
                
                if (TestData.CurrentTestScenario.TestResults.Count > 0) {
                    
                    if (TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Details.Count == 0 &&
                        TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Status == TestStateNotTested) {

                        TestData.CurrentTestScenario.TestResults.RemoveAt(TestData.CurrentTestScenario.TestResults.Count - 1);
                    }
                }
                
//                if ((null != TestData.CurrentTestResult.Name &&
//                     string.Empty != TestData.CurrentTestResult.Name) ||
//                    (0 < TestData.CurrentTestResult.Details.Count)) {
//                    //TmxHelper.TestCaseStarted =
//                    //    System.DateTime.Now;
//                    TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
//                    TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] =
//                        TestData.CurrentTestResult;
//                }
            }
            
            // set time spent on the previous scenario
            if (null != TestData.CurrentTestScenario) {
                
                if (DateTime.MinValue != TestData.CurrentTestScenario.Timestamp) {
                    
                    TestData.CurrentTestScenario.SetTimeSpent(
                        TestData.CurrentTestScenario.TimeSpent +=
                        (DateTime.Now - TestData.CurrentTestScenario.Timestamp).TotalSeconds);
                    TestData.CurrentTestScenario.Timestamp = DateTime.MinValue;
                }
            }
            
            if (testSuite != null) {
                
                TestData.CurrentTestSuite = testSuite;
            } else if (!string.IsNullOrEmpty(testSuiteName)) {
                
                var testSuite2 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite2 != null) {
                    
                    TestData.CurrentTestSuite = testSuite2;
                }
            } else if (!string.IsNullOrEmpty(testSuiteId)) {
                
                var testSuite3 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite3 != null) {
                    
                    TestData.CurrentTestSuite = testSuite3;
                }
            }
            
            if (TestData.CurrentTestSuite == null) {
                
                return result;
            }
            
            // 20140716
            try {
                // 20140716
                // if (1 == TestData.CurrentTestSuite.TestScenarios.Count && "autogenerated" == TestData.CurrentTestSuite.TestScenarios[0].Name &&
                // 20140718
                // if (1 == TestData.CurrentTestSuite.TestScenarios.Count && TestData.Autogenerated == TestData.CurrentTestSuite.TestScenarios[0].Name &&
                //     1 == TestData.CurrentTestSuite.TestScenarios[0].TestResults.Count && TestResultOrigins.Automatic == TestData.CurrentTestSuite.TestScenarios[0].TestResults[0].Origin) {
                if (1 <= TestData.CurrentTestSuite.TestScenarios.Count && TestData.Autogenerated == TestData.CurrentTestSuite.TestScenarios[0].Name &&
                    (0 == TestData.CurrentTestSuite.TestScenarios[0].TestResults.Count ||
                     1 == TestData.CurrentTestSuite.TestScenarios[0].TestResults.Count && TestResultOrigins.Automatic == TestData.CurrentTestSuite.TestScenarios[0].TestResults[0].Origin)) {
                    
                    TestData.CurrentTestSuite.TestScenarios.RemoveAt(0);
                }
            }
            catch {}
            
            if (string.IsNullOrEmpty(testScenarioId))
                testScenarioId = GetTestScenarioId();
            
//            if (null != TestData.TestSuites && 0 < TestData.TestSuites.Count) {
//                int lastTestSuiteNumber = TestData.TestSuites.Count - 1;
//
//                if (null != TestData.TestSuites[lastTestSuiteNumber].TestScenarios && 0 < TestData.TestSuites[lastTestSuiteNumber].TestScenarios.Count) {
//                    int lastTestScenarioNumber = TestData.TestSuites[lastTestSuiteNumber].TestScenarios.Count - 1;
//
//                    if (TestData.CurrentTestScenario.Name == TestData.TestSuites[lastTestSuiteNumber].TestScenarios[lastTestScenarioNumber].Name &&
//                        TestData.CurrentTestScenario.Id == TestData.TestSuites[lastTestSuiteNumber].TestScenarios[lastTestScenarioNumber].Id) {
//                        
//                        TestData.TestSuites[lastTestSuiteNumber].TestScenarios[lastTestScenarioNumber] = TestData.CurrentTestScenario;
//                    }
//                }
//            }
            
            TestData.CurrentTestSuite.TestScenarios.Add(
                new TestScenario(testScenarioName, testScenarioId, TestData.CurrentTestSuite.Id) { SuiteUniqueId = TestData.CurrentTestSuite.UniqueId });
            
            if (!string.IsNullOrEmpty(testScenarioDescription))
                TestData.CurrentTestSuite.TestScenarios[CurrentTestSuite.TestScenarios.Count - 1].Description = testScenarioDescription;
            
            TestData.CurrentTestScenario = 
                (TestScenario)TestData.CurrentTestSuite.TestScenarios[CurrentTestSuite.TestScenarios.Count - 1];
            
            TestData.CurrentTestScenario.BeforeTest = testScenarioBeforeTest;
            TestData.CurrentTestScenario.AfterTest = testScenarioAfterTest;
            
            TestData.CurrentTestScenario.PlatformUniqueId = testPlatformId != Guid.Empty ? testPlatformId : TestData.CurrentTestSuite.PlatformUniqueId;
            TestData.CurrentTestScenario.PlatformId = TestPlatforms.First(tp => tp.UniqueId == CurrentTestScenario.PlatformUniqueId).Id;
            
            // set the initial time for this scenario's session
            CurrentTestScenario.SetNow();
            
            OnTmxNewTestScenarioAdded(TestData.CurrentTestScenario, null);
            
            if (Preferences.Storage) {
                
                using (var session = StorageHelper.SessionFactory.OpenSession())
                    session.Save(TestData.CurrentTestScenario);
            }
            
            result = true;
            
            return result;
        }
        
        internal static ITestCase GetTestCase(
            ITestSuite testSuite,
            string testCaseName,
            string testCaseId,
            string testScenarioName,
            string testScenarioId,
            string testSuiteName,
            string testSuiteId,
            Guid testPlatformId)
        {
            ITestCase result = null;
            
            if (null == testSuite) {
                
                testSuite =
                    TestData.GetTestSuite(
                        testSuiteName,
                        testSuiteId,
                        testPlatformId);
                
            }
            
            if (null == testSuite)
                // better error description?
                return result;
            
            ITestScenario testScenario = null;
            
            if (null != testSuite)
                testScenario =
                    TestData.GetTestScenario(
                    testSuite,
                    testScenarioName,
                    testScenarioId,
                    testSuiteName,
                    testSuiteId,
                    testPlatformId);
            
            if (null == testScenario)
                // better error description?
                return result;
            
            if (null != testScenario && 0 < testScenario.TestCases.Count)
                foreach (var testCase in testScenario.TestCases)
                    if ((testCaseName == testCase.TestCaseName &&
                        testCaseId == testCase.TestCaseId) ||
                        (string.IsNullOrEmpty(testCaseName) && testCaseId == testCase.TestCaseId) ||
                        (string.IsNullOrEmpty(testCaseId) && testCaseName == testCase.TestCaseName)) {
                        
                        result = testCase;
                        break;
                    }
            
            return result;
        }
        
        internal static ITestScenario GetTestScenario(
            ITestSuite testSuite,
            string testScenarioName,
            string testScenarioId,
            string testSuiteName,
            string testSuiteId,
            Guid testPlatformId)
        {
            TestScenario result = null;
            if (testSuite != null)
                TestData.CurrentTestSuite = testSuite;
            else if (!string.IsNullOrEmpty(testSuiteName)) {
                /*
            } else if (testSuite == null && 
                        testSuiteName != string.Empty &&
                        testSuiteName != null) {
            */
                var testSuite2 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite2 != null)
                    TestData.CurrentTestSuite = testSuite2;
                
            } else if (!string.IsNullOrEmpty(testSuiteId)) {
                /*
            } else if (testSuite == null && 
                        testSuiteId != string.Empty &&
                        testSuiteId != null) {
            */
                var testSuite3 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite3 != null)
                    TestData.CurrentTestSuite = testSuite3;
            }
            
            if (TestData.CurrentTestSuite == null)
                return result;
            
            if (!string.IsNullOrEmpty(testScenarioName)) {
                
                foreach (ITestScenario testScenario in TestData.CurrentTestSuite.TestScenarios)
                    if (testScenario.Name == testScenarioName) {
                        
                        TestData.CurrentTestScenario = testScenario;
                        return TestData.CurrentTestScenario;
                        // TODO: try this
                        // return TestData.CurrentTestScenario = testScenario;
                    }
            }
            
            if (!string.IsNullOrEmpty(testScenarioId)) {
                // foreach (ITestScenario testScenario in TestData.CurrentTestSuite.TestScenarios.Cast<ITestScenario>().Where(testScenario => testScenario.Id == testScenarioId)) {
                foreach (ITestScenario testScenario in TestData.CurrentTestSuite.TestScenarios.Where(testScenario => testScenario.Id == testScenarioId)) {
                    if (testPlatformId != testScenario.PlatformUniqueId)
                        continue;
                    if (testScenarioName != testScenario.Name && !string.IsNullOrEmpty(testScenarioName))
                        continue;
                    TestData.CurrentTestScenario = testScenario;
                    return testScenario;
                }
            }

            return result;
        }
        
        internal static IOrderedEnumerable<ITestSuite> SearchTestSuite(
            Func<ITestSuite, bool> query,
            Func<ITestSuite, object> ordering,
            bool desc)
        {
            IOrderedEnumerable<ITestSuite> result = null;
            
            if (desc) {
                result =
                    from suite in TestData.TestSuites
                    where query(suite)
                    orderby ordering(suite) descending
                    select suite;
            } else {
                result =
                    from suite in TestData.TestSuites
                    where query(suite)
                    orderby ordering(suite) ascending
                    select suite;
            }
            return result;
        }
        
        static IEnumerable<ITestScenario> getAllScenarios()
        {
            return TestData.TestSuites.SelectMany(suite => suite.TestScenarios).ToList();
        }
        
        internal static IOrderedEnumerable<ITestScenario> SearchTestScenario(
            Func<ITestScenario, bool> query,
            Func<ITestScenario, object> ordering,
            bool desc)
        {
            IOrderedEnumerable<ITestScenario> result = null;
            
            if (desc) {
                result =
                    from scenario in getAllScenarios()
                    where query(scenario)
                    orderby ordering(scenario) descending
                    select scenario;
            } else {
                result =
                    from scenario in getAllScenarios()
                    where query(scenario)
                    orderby ordering(scenario) ascending
                    select scenario;
            }
            
            return result;
        }
        
        static IEnumerable<ITestResult> getAllTestResults()
        {
            return (from suite in TestData.TestSuites from ITestScenario scenario in suite.TestScenarios from ITestResult testResult in scenario.TestResults select testResult).ToList();
            /*
            List<TestResult> result = new List<TestResult>();
            foreach (TestSuite suite in TestData.TestSuites)
            {
                foreach (TestScenario scenario in suite.TestScenarios)
                {
                    foreach (TestResult testResult in scenario.TestResults)
                    {
                        result.Add(testResult);
                    }
                }
            }
            return result;
            */
        }
        
        internal static IOrderedEnumerable<ITestResult> SearchTestResult(
            Func<ITestResult, bool> query,
            Func<ITestResult, object> ordering,
            bool desc)
        {
            IOrderedEnumerable<ITestResult> result = null;
            
            if (desc) {
                result =
                    from testResult in getAllTestResults()
                    where query(testResult)
                    orderby ordering(testResult) descending
                    select testResult;
            } else {
                result =
                    from testResult in getAllTestResults()
                    where query(testResult)
                    orderby ordering(testResult) ascending
                    select testResult;
            }
            return result;
        }
    }
}
