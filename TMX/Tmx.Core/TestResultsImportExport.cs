/*
 * Created by SharpDevelop.
 * User: Alexander Petrovskiy
 * Date: 10/31/2014
 * Time: 6:21 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */

namespace Tmx.Core
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml.Linq;
    using Tmx.Interfaces;
    using Tmx.Interfaces.TestStructure;
    
    /// <summary>
    /// Description of TestResultsImportExport.
    /// </summary>
    public class TestResultsImportExport
    {
        public List<ITestSuite> ImportTestResultsFromXdocument(XDocument doc)
        {
            var df = doc.Root.Name.Namespace;
            var suites = from suite in doc.Descendants("suite")
                                  where suite.Attribute("name").Value != TestData.Autogenerated
                                  select suite;
            return ImportTestSuites(suites);
        }
        
		public List<ITestSuite> ImportTestSuites(IEnumerable<XElement> suiteElements)
		{
            var importedTestSuites = new List<ITestSuite>();
            // 20141107
            var testStatistics = new TestStatistics();
            
			foreach (var suiteElement in suiteElements) {
				string suiteDescription = string.Empty;
				try {
					suiteDescription = suiteElement.Attribute("description").Value;
				} catch {
				}
				
                var testSuite = new TestSuite {
                    Id = suiteElement.Attribute("id").Value,
                    Name = suiteElement.Attribute("name").Value,
                    PlatformId = suiteElement.Attribute("platformId").Value,
                    Description = suiteDescription,
                    TimeSpent = Convert.ToDouble(suiteElement.Attribute("timeSpent").Value ?? "0")
                };
                var scenarios = from scenario in suiteElement.Descendants("scenario")
                                            where scenario.Attribute("name").Value != TestData.Autogenerated
                                            select scenario;
                testSuite.TestScenarios.AddRange(importTestScenarios(scenarios, testSuite.Id));
                // 20141107
                // importedTestSuites.Add(testSuite);
				// TODO: refresh imported suites
				// TestData.RefreshSuiteStatistics(TestData.CurrentTestSuite, true);
				testStatistics.RefreshSuiteStatistics(testSuite, true);
				setSuiteStatus(testSuite, true);
				importedTestSuites.Add(testSuite);
			}
            return importedTestSuites;
		}

		List<ITestScenario> importTestScenarios(IEnumerable<XElement> scenarioElements, string suiteId)
		{
            var importedTestScenarios = new List<ITestScenario>();
            if (null == scenarioElements) return importedTestScenarios;
            
			foreach (var scenarioElement in scenarioElements) {
				string scenarioDescription = string.Empty;
				try {
					scenarioDescription = scenarioElement.Attribute("description").Value;
				} catch {
				}
				
                var testScenario = new TestScenario {
                    Id = scenarioElement.Attribute("id").Value,
                    Name = scenarioElement.Attribute("name").Value,
                    PlatformId = scenarioElement.Attribute("platformId").Value,
                    Description = scenarioDescription,
                    TimeSpent = Convert.ToDouble(scenarioElement.Attribute("timeSpent").Value ?? "0"),
                    SuiteId = suiteId
                };
                var testResults = from testResult in scenarioElement.Descendants("testResult")
                                  //where testResult.Attribute("name").Value != "autoclosed"
				select testResult;
                testScenario.TestResults.AddRange(importTestResults(testResults, testScenario.SuiteId, testScenario.Id));
                importedTestScenarios.Add(testScenario);
			}
            return importedTestScenarios;
		}

		List<ITestResult> importTestResults(IEnumerable<XElement> testResultElements, string suiteId, string scenarioId)
		{
            var importedTestResults = new List<ITestResult>();
            if (null == testResultElements) return importedTestResults;
            
			foreach (var testResultElement in testResultElements) {
				bool passedValue = false;
				bool knownIssueValue = false;
				try {
                    passedValue |= "PASSED" == testResultElement.Attribute("status").Value;
                    knownIssueValue |= "KNOWN ISSUE" == testResultElement.Attribute("status").Value;
				} catch {
				}
				TestResultOrigins origin = TestResultOrigins.Logical;
				try {
                    if ("TECHNICAL" == testResultElement.Attribute("origin").Value.ToUpper())
                        origin = TestResultOrigins.Technical;
                    if ("AUTOMATIC" == testResultElement.Attribute("origin").Value.ToUpper())
                        origin = TestResultOrigins.Automatic;
				} catch {
				}
				if ((TestResultOrigins.Technical == origin) &&
				    passedValue) {
					continue;
				}
				string testResultDescription = string.Empty;
				try {
					testResultDescription = testResultElement.Attribute("description").Value;
				} catch {
				}
				
				var testResult = new TestResult {
				    Id = testResultElement.Attribute("id").Value,
				    Name = testResultElement.Attribute("name").Value,
				    Description = testResultDescription,
				    enStatus = (!passedValue ? TestResultStatuses.Failed : knownIssueValue ? TestResultStatuses.KnownIssue : passedValue ? TestResultStatuses.Passed : TestResultStatuses.NotTested),
				    SuiteId = suiteId,
				    ScenarioId = scenarioId
                    // Timestamp = singleTestResult.Attribute("timestamp").Value
				};
				testResult.SetOrigin(origin);
				testResult.SetTimeSpent(Convert.ToDouble(testResultElement.Attribute("timeSpent").Value ?? "0"));
				try {
					testResult.PlatformId = testResultElement.Attribute("platformId").Value;
				} catch (Exception) {
					//                                cmdlet.WriteVerbose(cmdlet, "adding test platform to the current test result");
					//                                cmdlet.WriteVerbose(cmdlet, eTestResultPlatform.Message);
				}
				try {
					// lastTestResultDetailName = string.Empty;
                    var testResultDetails = from testResultDetail in testResultElement.Descendants("detail")
                                            select testResultDetail;
//					if (null == testResultDetails || !testResultDetails.Any())
//						continue;
					testResult.Details.AddRange(importTestResultDetails(testResultDetails)); // , testResult);
				} catch (Exception e) {
					//                                cmdlet.WriteVerbose(cmdlet, eImportDetails);
//Console.WriteLine(e.Message);
				}
				importedTestResults.Add(testResult);
			}
            return importedTestResults;
		}

		List<ITestResultDetail> importTestResultDetails(IEnumerable<XElement> testResultDetailElements)
		{
		    var importedTestResultDetails = new List<ITestResultDetail>();
		    if (null == testResultDetailElements) return importedTestResultDetails;
		    
			foreach (var testResultDetailElement in testResultDetailElements) {
				var detail = new TestResultDetail {
					TextDetail = testResultDetailElement.Attribute("name").Value
				};
				string detailStatus = testResultDetailElement.Attribute("status").Value;
				switch (detailStatus.ToUpper()) {
					case "FAILED":
						detail.DetailStatus = TestResultStatuses.Failed;
						break;
					case "PASSED":
						detail.DetailStatus = TestResultStatuses.Passed;
						break;
					case "KNOWNISSUE":
						detail.DetailStatus = TestResultStatuses.KnownIssue;
						break;
					case "NOTTESTED":
						detail.DetailStatus = TestResultStatuses.NotTested;
						break;
					default:
						detail.DetailStatus = TestResultStatuses.NotTested;
						break;
				}
			}
		    return importedTestResultDetails;
		}
		
		public XDocument GetTestResultsAsXdocument(ISearchCmdletBaseDataObject searchCriteria, List<ITestSuite> suites)
		{
		    var suitesElement = GetTestResultsAsXelement(searchCriteria, suites);
			// var document = new XDocument();
			var document = new XDocument(new XDeclaration("1.0", "utf-8", "yes"));
			document.Add(suitesElement);
			return document;
		}

		public XElement GetTestResultsAsXelement(ISearchCmdletBaseDataObject searchCriteria, List<ITestSuite> suites)
		{
			var gathered = new GatherTestResultsCollections();
			gathered.GatherCollections(searchCriteria, suites);
			var suitesElement = CreateSuitesXElementWithParameters(gathered.TestSuites, gathered.TestScenarios, gathered.TestResults, (new XMLElementsNativeStruct()));
			return suitesElement;
		}
		
        public XElement CreateSuitesXElementWithParameters(
                IOrderedEnumerable<ITestSuite> suites,
                IOrderedEnumerable<ITestScenario> scenarios,
                IOrderedEnumerable<ITestResult> testResults,
                IXMLElementsStruct xmlStruct)
        {

            var suitesElement = 
                new XElement(xmlStruct.SuitesNode,
                             from suite in suites
                             select new XElement(xmlStruct.SuiteNode,
                                                 new XAttribute("id", suite.Id),
                                                 new XAttribute("name", suite.Name),
                                                 new XAttribute("status", suite.Status),
                                                 createXattribute(xmlStruct.TimeSpentAttribute, Convert.ToInt32(suite.Statistics.TimeSpent)),
                                                 new XAttribute("all", suite.Statistics.All.ToString()),
                                                 new XAttribute("passed", suite.Statistics.Passed.ToString()),
                                                 createXattribute(xmlStruct.FailedAttribute, suite.Statistics.Failed.ToString()),
                                                 new XAttribute("notTested", suite.Statistics.NotTested.ToString()),
                                                 new XAttribute("knownIssue", suite.Statistics.PassedButWithBadSmell.ToString()),
                                                 createXattribute("description", suite.Description),
                                                 createXattribute("platformId", suite.PlatformId),
                                                 CreateScenariosXElementCommon(
                                                     suite,
                                                     scenarios,
                                                     testResults,
                                                     xmlStruct)
                                                 )
                            );
            return suitesElement;
        }
        
        public XElement CreateScenariosXElementCommon(
                ITestSuite suite,
                IOrderedEnumerable<ITestScenario> scenarios,
                IOrderedEnumerable<ITestResult> testResults,
                IXMLElementsStruct xmlStruct)
        {

            var testScenariosFiltered = 
                from scenario in scenarios
                where scenario.SuiteId == suite.Id && scenario.PlatformId == suite.PlatformId
                select scenario;

            if (!testScenariosFiltered.Any()) {
                return null;
            }
            
            var scenariosElement = 
                 new XElement(xmlStruct.ScenariosNode,
                              from scenario in testScenariosFiltered
                              select getScenariosXElement(
                                  suite, 
                                  scenario, 
                                  testResults, 
                                  xmlStruct)
                             );
            return scenariosElement;
        }
        
        XElement getScenariosXElement(
                ITestSuite suite,
                ITestScenario scenario,
                IOrderedEnumerable<ITestResult> testResults,
                IXMLElementsStruct xmlStruct)
        {

            var scenariosElement =
                new XElement(xmlStruct.ScenarioNode,
                             new XAttribute("id", scenario.Id),
                             new XAttribute("name", scenario.Name),
                             new XAttribute("status", scenario.Status),
                             createXattribute(xmlStruct.TimeSpentAttribute, Convert.ToInt32(suite.Statistics.TimeSpent)),
                             new XAttribute("all", scenario.Statistics.All.ToString()),
                             new XAttribute("passed", scenario.Statistics.Passed.ToString()),
                             createXattribute(xmlStruct.FailedAttribute, scenario.Statistics.Failed.ToString()),
                             new XAttribute("notTested", scenario.Statistics.NotTested.ToString()),
                             new XAttribute("knownIssue", scenario.Statistics.PassedButWithBadSmell.ToString()),
                             createXattribute("description", scenario.Description),
                             createXattribute("platformId", scenario.PlatformId),
                             CreateTestResultsXElementCommon(
                                 suite,
                                 scenario,
                                 testResults,
                                 xmlStruct)
                            );

            return scenariosElement;
        }
            
        public XElement CreateTestResultsXElementCommon(
                ITestSuite suite,
                ITestScenario scenario,
                IOrderedEnumerable<ITestResult> testResults,
                IXMLElementsStruct xmlStruct)
        {

            var testResultsFiltered = 
                from testResult in testResults
                where testResult.SuiteId == suite.Id &&
                testResult.ScenarioId == scenario.Id &&
                testResult.Id != null &&
                testResult.Name != null &&
                testResult.PlatformId == scenario.PlatformId
                select testResult;

            if (!testResultsFiltered.Any()) {
                return null;
            }
            
            var testResultsElement =
                new XElement(xmlStruct.TestResultsNode,
                             from testResult in testResultsFiltered
                             select getTestResultsXElement(testResult, xmlStruct)
                            );

            return testResultsElement;
        }
        
        XElement getTestResultsXElement(
                ITestResult testResult,
                IXMLElementsStruct xmlStruct)
        {

            var testResultsElement =
                new XElement(xmlStruct.TestResultNode,
                             new XAttribute("id", testResult.Id),
                             new XAttribute("name", testResult.Name),
                             new XAttribute("status", testResult.Status),
                             new XAttribute("origin", testResult.Origin),
                             createXattribute(xmlStruct.TimeSpentAttribute, Convert.ToInt32(testResult.TimeSpent)), // ??
                             createXelement(
                                 "source",
                                 createXattribute("scriptName", testResult.ScriptName),
                                 createXattribute("lineNumber", testResult.LineNumber),
                                 createXattribute("position", testResult.Position),
                                 createXattribute("code", testResult.Code)
                                ),
                             createXattribute(xmlStruct.TimeStampAttribute, testResult.Timestamp),
                             createXelement(
                                 "error",
                                 createXattribute("error", testResult.Error)
                                ),
                             createXattribute("screenshot", testResult.Screenshot),
                             createXattribute("description", testResult.Description),
                             createXattribute("platformId", testResult.PlatformId),
                             CreateTestResultDetailsXElement(
                                 testResult,
                                 xmlStruct)
                            );

            return testResultsElement;
        }
        
        public XElement CreateTestResultDetailsXElement(
                ITestResult testResult,
                IXMLElementsStruct xmlStruct)
        {

            if (0 == testResult.Details.Count) {
                return null;
            }

            var testResultDetailsElement =
                new XElement("details",
                             from testResultDetail in testResult.Details
                             select new XElement("detail", 
                                                 createXattribute("name", testResultDetail.Name),
                                                 createXattribute(xmlStruct.TimeSpentAttribute, testResultDetail.Timestamp),
                                                 createXattribute("status", testResultDetail.DetailStatus)
                                                )
                            );

            return testResultDetailsElement;
        }
		
        XAttribute createXattribute(string name, object valueObject)
        {
            XAttribute result = null;
            
            if (null == valueObject)
                return null;
            
            result = new XAttribute(name, valueObject);
            
            return result;
        }
        
        XElement createXelement(string name, params object[] content)
        {
            XElement result = null;
            
			if (null == content[0])
				return null;
            
            result = new XElement(name, content);
            
            return result;
        }
        
        internal void setSuiteStatus(ITestSuite testSuite, bool skipAutomatic)
        {
//            if (null == TestData.CurrentTestSuite)
//                TestData.InitCurrentTestScenario();
            
            // TestData.SetScenarioStatus(skipAutomatic);
            // setScenarioStatus(skipAutomatic);
            
            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            // if (TestData.CurrentTestSuite != null &&
            if (null != testSuite.TestScenarios && 0 < testSuite.TestScenarios.Count) {
                // 0 < TestData.CurrentTestSuite.TestScenarios.Count) {
                
                foreach (var scenario in testSuite.TestScenarios) {
                    
                    // 20141107
                    setScenarioStatus(scenario, skipAutomatic);
                    
                    switch (scenario.enStatus) {
                        case TestScenarioStatuses.Passed:
                            counterPassedResults++;
                            if (TestSuiteStatuses.Failed != testSuite.enStatus)
                                testSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        case TestScenarioStatuses.Failed:
                            testSuite.enStatus = TestSuiteStatuses.Failed;
                            return;
                        case TestScenarioStatuses.NotTested:
                            break;
                        case TestScenarioStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            if (TestSuiteStatuses.Failed != testSuite.enStatus)
                                testSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        default:
                            // 20130428
                            //throw new Exception("Invalid value for TestScenarioStatuses");
                            // as Not Tested
                            break;
                    }
                }
            	
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    testSuite.enStatus = TestSuiteStatuses.KnownIssue;
                
                // set statistics
                // 20141107
                // RefreshSuiteStatistics(TestData.CurrentTestSuite, skipAutomatic);
                var testStatistics = new TestStatistics();
                testStatistics.RefreshSuiteStatistics(testSuite, skipAutomatic);
            }
        }
        
        internal void setScenarioStatus(ITestScenario testScenario, bool skipAutomatic)
        {
//            if (null == TestData.CurrentTestScenario) {
//                TestData.InitCurrentTestScenario();
//            }

            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            // if (null != TestData.CurrentTestScenario &&
            //     null != TestData.CurrentTestScenario.TestResults &&
            //     0 < TestData.CurrentTestScenario.TestResults.Count) {
            if (null != testScenario.TestResults && 0 < testScenario.TestResults.Count) {
                foreach (var testResult in testScenario.TestResults) {

                    switch (testResult.enStatus) {
                        case TestResultStatuses.Passed:
                            counterPassedResults++;
                            if (TestScenarioStatuses.Failed != testScenario.enStatus)
                                testScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        case TestResultStatuses.Failed:
                            testScenario.enStatus = TestScenarioStatuses.Failed;
                            return;
                        case TestResultStatuses.NotTested:
                            
                            break;
                        case TestResultStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            if (TestScenarioStatuses.Failed != testScenario.enStatus)
                                testScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        default:
                            throw new Exception("Invalid value for TestResultStatuses");
                    }
                }
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    testScenario.enStatus = TestScenarioStatuses.KnownIssue;
            
                // set statistics
                // 20141107
                // RefreshScenarioStatistics(TestData.CurrentTestScenario, skipAutomatic);
                var testStatistics = new TestStatistics();
                testStatistics.RefreshScenarioStatistics(testScenario, skipAutomatic);
            }
        }
    }
}
