/*
 * Created by SharpDevelop.
 * User: Alexander Petrovskiy
 * Date: 10/31/2014
 * Time: 6:21 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */

namespace Tmx.Core
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml.Linq;
    using Tmx.Interfaces;
    using Tmx.Interfaces.TestStructure;
    
    /// <summary>
    /// Description of TestResultsImportExport.
    /// </summary>
    public class TestResultsImportExport
    {
        public List<ITestSuite> ImportTestResultsFromXdocument(XDocument doc)
        {
            var df = doc.Root.Name.Namespace;
            var suites = from suite in doc.Descendants("suite")
                                  where suite.Attribute("name").Value != TestData.Autogenerated
                                  select suite;
            return ImportTestSuites(suites);
        }
        
		public List<ITestSuite> ImportTestSuites(IEnumerable<XElement> suiteElements)
		{
            var importedTestSuites = new List<ITestSuite>();
            
			foreach (var suiteElement in suiteElements) {
				string suiteDescription = string.Empty;
				try {
					suiteDescription = suiteElement.Attribute("description").Value;
				} catch {
				}
				// var testSuite = TestData.GetTestSuite(singleSuite.Attribute("name").Value, singleSuite.Attribute("id").Value, singleSuite.Attribute("platformId").Value);
//				var testSuite = importedTestSuites
//				    .FirstOrDefault(ts => ts.Id == singleSuite.Attribute("id").Value &&
//                                ts.Name == singleSuite.Attribute("name").Value &&
//                                ts.PlatformId == singleSuite.Attribute("platformId").Value);
                // TestData.CurrentTestSuite = testSuite;
//                if (null == testSuite)
					// TestData.AddTestSuite(singleSuite.Attribute("name").Value, singleSuite.Attribute("id").Value, singleSuite.Attribute("platformId").Value, suiteDescription, null, null);
                var testSuite = new TestSuite {
                    Id = suiteElement.Attribute("id").Value,
                    Name = suiteElement.Attribute("name").Value,
                    PlatformId = suiteElement.Attribute("platformId").Value,
                    Description = suiteDescription,
                    TimeSpent = Convert.ToDouble(suiteElement.Attribute("timeSpent").Value ?? "0")
                };
                var scenarios = from scenario in suiteElement.Descendants("scenario")
                                            where scenario.Attribute("name").Value != TestData.Autogenerated
                                            select scenario;
                testSuite.TestScenarios.AddRange(importTestScenarios(scenarios));
                importedTestSuites.Add(testSuite);
				// TODO: refresh imported suites
				// TestData.RefreshSuiteStatistics(TestData.CurrentTestSuite, true);
			}
            return importedTestSuites;
		}

		List<ITestScenario> importTestScenarios(IEnumerable<XElement> scenarioElements)
		{
            var importedTestScenarios = new List<ITestScenario>();
            if (null == scenarioElements) return importedTestScenarios;
            
			foreach (var scenarioElement in scenarioElements) {
				string scenarioDescription = string.Empty;
				try {
					scenarioDescription = scenarioElement.Attribute("description").Value;
				} catch {
				}
				// var testScenario = TestData.GetTestScenario(TestData.CurrentTestSuite, singleScenario.Attribute("name").Value, singleScenario.Attribute("id").Value, TestData.CurrentTestSuite.Name, TestData.CurrentTestSuite.Id, TestData.CurrentTestSuite.PlatformId);
//				var testScenario = importedTestScenarios
//				    .FirstOrDefault(tsc => tsc.Name == singleScenario.Attribute("name").Value &&
//				           tsc.Id == singleScenario.Attribute("id").Value &&
//				           tsc.PlatformId == singleScenario.Attribute("platformId").Value);
				// TestData.CurrentTestScenario = testScenario;
//                if (null == testScenario)
                    // TestData.AddTestScenario(TestData.CurrentTestSuite, singleScenario.Attribute("name").Value, singleScenario.Attribute("id").Value, scenarioDescription, string.Empty, string.Empty, singleScenario.Attribute("platformId").Value, null, null);
                var testScenario = new TestScenario {
                    Id = scenarioElement.Attribute("id").Value,
                    Name = scenarioElement.Attribute("name").Value,
                    PlatformId = scenarioElement.Attribute("platformId").Value,
                    Description = scenarioDescription,
                    TimeSpent = Convert.ToDouble(scenarioElement.Attribute("timeSpent").Value ?? "0")
                };
                var testResults = from testResult in scenarioElement.Descendants("testResult")
                                  //where testResult.Attribute("name").Value != "autoclosed"
				select testResult;
                testScenario.TestResults.AddRange(importTestResults(testResults));
                importedTestScenarios.Add(testScenario);
			}
            return importedTestScenarios;
		}

		List<ITestResult> importTestResults(IEnumerable<XElement> testResultElements)
		{
            var importedTestResults = new List<ITestResult>();
            if (null == testResultElements) return importedTestResults;
            
			foreach (var testResultElement in testResultElements) {
				bool passedValue = false;
				bool knownIssueValue = false;
				try {
                    passedValue |= "PASSED" == testResultElement.Attribute("status").Value;
                    knownIssueValue |= "KNOWN ISSUE" == testResultElement.Attribute("status").Value;
				} catch {
				}
				TestResultOrigins origin = TestResultOrigins.Logical;
				try {
                    if ("TECHNICAL" == testResultElement.Attribute("origin").Value.ToUpper())
                        origin = TestResultOrigins.Technical;
                    if ("AUTOMATIC" == testResultElement.Attribute("origin").Value.ToUpper())
                        origin = TestResultOrigins.Automatic;
				} catch {
				}
				if ((TestResultOrigins.Technical == origin) &&
				    passedValue) {
					continue;
				}
				string testResultDescription = string.Empty;
				try {
					testResultDescription = testResultElement.Attribute("description").Value;
				} catch {
				}
				
				// TestData.AddTestResult(singleTestResult.Attribute("name").Value, singleTestResult.Attribute("id").Value, passedValue, knownIssueValue, false, null, null, testResultDescription, origin, true);
				// var currentlyAddedTestResult = TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1];
				var testResult = new TestResult {
				    Id = testResultElement.Attribute("id").Value,
				    Name = testResultElement.Attribute("name").Value,
				    Description = testResultDescription,
				    enStatus = (!passedValue ? TestResultStatuses.Failed : knownIssueValue ? TestResultStatuses.KnownIssue : passedValue ? TestResultStatuses.Passed : TestResultStatuses.NotTested) // ,
                    // Timestamp = singleTestResult.Attribute("timestamp").Value
				};
				testResult.SetOrigin(origin);
				testResult.SetTimeSpent(Convert.ToDouble(testResultElement.Attribute("timeSpent").Value ?? "0"));
				try {
					testResult.PlatformId = testResultElement.Attribute("platformId").Value;
				} catch (Exception) {
					//                                cmdlet.WriteVerbose(cmdlet, "adding test platform to the current test result");
					//                                cmdlet.WriteVerbose(cmdlet, eTestResultPlatform.Message);
				}
				try {
					// lastTestResultDetailName = string.Empty;
                    var testResultDetails = from testResultDetail in testResultElement.Descendants("detail")
                                            select testResultDetail;
//					if (null == testResultDetails || !testResultDetails.Any())
//						continue;
					testResult.Details.AddRange(importTestResultDetails(testResultDetails)); // , testResult);
				} catch (Exception e) {
					//                                cmdlet.WriteVerbose(cmdlet, eImportDetails);
Console.WriteLine(e.Message);
				}
				importedTestResults.Add(testResult);
			}
            return importedTestResults;
		}

		List<ITestResultDetail> importTestResultDetails(IEnumerable<XElement> testResultDetailElements)
		{
		    var importedTestResultDetails = new List<ITestResultDetail>();
		    if (null == testResultDetailElements) return importedTestResultDetails;
		    
			foreach (var testResultDetailElement in testResultDetailElements) {
				var detail = new TestResultDetail {
					TextDetail = testResultDetailElement.Attribute("name").Value
				};
				string detailStatus = testResultDetailElement.Attribute("status").Value;
				switch (detailStatus.ToUpper()) {
					case "FAILED":
						detail.DetailStatus = TestResultStatuses.Failed;
						break;
					case "PASSED":
						detail.DetailStatus = TestResultStatuses.Passed;
						break;
					case "KNOWNISSUE":
						detail.DetailStatus = TestResultStatuses.KnownIssue;
						break;
					case "NOTTESTED":
						detail.DetailStatus = TestResultStatuses.NotTested;
						break;
					default:
						detail.DetailStatus = TestResultStatuses.NotTested;
						break;
				}
			}
		    return importedTestResultDetails;
		}
    }
}
